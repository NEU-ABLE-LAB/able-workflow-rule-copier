"""
Script for the {{ rule_name }} rule

{{ rule_description }}
"""

import sys
from typing import TYPE_CHECKING

from loguru import logger
import typer

if TYPE_CHECKING:  # pragma: no cover
    from snakemake.script import snakemake


###############################################################################
# Internal implementation (expects a Snakemake object)                        #
###############################################################################


def main_smk(smk) -> None:  # type: ignore[no-untyped-def]

    # Setup logging
    logger.remove()
    logger.add(smk.log.loguru)

    # TODO Read snakemake `input:` entries as
    # smk.input.<INPUT_NAME> as needed

    # TODO Read snakemake `output:` entries as
    # smk.output.<OUTPUT_NAME> as needed

    # TODO Read snakemake `params:` entries as
    # smk.params.<PARAM_NAME> as needed

    # TODO Read snakemake `wildcards:` entries as
    # smk.wildcards.<WILDCARD_NAME> as needed

    # Setup loguru logging
    logger.remove()
    logger.add(smk.log.loguru)

    # Pass any specific arguments to the script
    # For example, if the script expects a readme file:
    # readme_path = smk.input.readme
    main()


def main() -> None:
    """
    If the script is executed as part of a Snakemake workflow, forward to
    ``main_smk``. Otherwise emit a helpful error.
    """

    # TODO Enable logging for subprocesses if needed
    # logger.debug("Generating DAG SVG using Snakemake")
    # with (
    #     open(smk.log.stdout, "a") as stdout_log,
    #     open(smk.log.stderr, "a") as stderr_log
    # ):
    #
    #     subprocess.run(
    #         # TODO Fill in command if applicable,
    #         check=True,
    #         text=True,
    #         stdout=stdout_log,
    #         stderr=stderr_log,
    #     )


if __name__ == "__main__":
    try:
        main_smk(snakemake)
    except NameError:
        logger.error(
            "This script is designed to be run as part of a Snakemake workflow. "
            "Please run it through Snakemake."
        )
        sys.exit(0)
