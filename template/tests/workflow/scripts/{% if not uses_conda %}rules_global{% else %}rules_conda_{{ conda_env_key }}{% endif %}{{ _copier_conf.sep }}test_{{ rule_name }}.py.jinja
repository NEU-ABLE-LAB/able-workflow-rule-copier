from __future__ import annotations

import importlib.util
from pathlib import Path
from typing import Any

import pytest
from snakemake.io import InputFiles, OutputFiles, Log, Params, Resources, Wildcards
from snakemake.script import Snakemake

# --------------------------------------------------------------------------- #
# Load the script under test once per module                                  #
# --------------------------------------------------------------------------- #


@pytest.fixture(scope="module")
def module_under_test() -> Any:
    """Import the runtime module object for {{ rule_name }}.py."""
    root = Path(__file__).parents[4]  # project root
    {% if uses_conda -%}
    script = root / "workflow/scripts/rules_conda_{{ conda_env_key }}/{{ rule_name }}.py"
    {% else -%}
    script = root / "workflow/scripts/rules_global/{{ rule_name }}.py"
    {% endif %}

    if not script.exists():  # pragma: no cover
        pytest.skip(
            f"Cannot find {script} - are you running tests from the repo root?",
            allow_module_level=True,
        )

    spec = importlib.util.spec_from_file_location("{{ rule_name }}", str(script))
    module = importlib.util.module_from_spec(spec)  # type: ignore[arg-type]
    assert spec and spec.loader
    spec.loader.exec_module(module)  # type: ignore[arg-type]
    return module


# --------------------------------------------------------------------------- #
# Helper factories                                                            #
# --------------------------------------------------------------------------- #


def _build_snakemake(tmp_path: Path) -> Snakemake:  # noqa: D401
    """
    Construct a *real* Snakemake object with only the attributes required
    by ``main_smk``.
    """
    readme_path = tmp_path / "README.md"
    readme_path.touch()

    log_dir = tmp_path / "logs"
    log_dir.mkdir(parents=True, exist_ok=True)

    return Snakemake(
        input_=InputFiles(fromdict={"readme": str(readme_path)}),
        output=OutputFiles(),
        params=Params(),
        wildcards=Wildcards(),
        resources=Resources(),
        threads=1,
        log=Log(
            fromdict={
                "stderr": str(log_dir / "stderr.log"),
                "loguru": str(log_dir / "loguru.log"),
            }
        ),
        config={},
        rulename="{{ rule_name }}_test",
        bench_iteration=None,
    )


# --------------------------------------------------------------------------- #
# Tests                                                                       #
# --------------------------------------------------------------------------- #


def test_main_smk_runs(tmp_path, module_under_test):
    """Smoke-test that ``main_smk`` executes without error."""
    smk = _build_snakemake(tmp_path)
    module_under_test.main_smk(smk)  # type: ignore[attr-defined]
