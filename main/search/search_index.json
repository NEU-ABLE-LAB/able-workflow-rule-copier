{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ABLE Workflow Rule Copier","text":"<p>A copier template for generating a snakemake workflow rule that may use the project's python package.</p> <p>This template assumes that you have already created an <code>able-workflow-copier</code> project and have optionally created a <code>able-workflow-module-copier</code> module and <code>able-workflow-etl-copier</code> ETL process.</p>"},{"location":"#overview-of-able-workflow-copier-templates","title":"Overview of ABLE Workflow copier templates","text":"<ul> <li><code>able-workflow-copier</code></li> <li><code>able-workflow-module-copier</code></li> <li><code>able-workflow-etl-copier</code></li> <li><code>able-workflow-rule-copier</code></li> </ul>"},{"location":"#contributing","title":"Contributing","text":""},{"location":"#environment-configuration","title":"Environment configuration","text":"<p>See the environment configuration <code>able-workflow-copier</code>.</p> <ol> <li>Create a development environment with conda</li> </ol> <pre><code># Create the environment (or update and prune if it already exists)\nconda env update --name able-workflow-rule-copier --file environment-py312-dev.yaml --prune\n</code></pre> <p>Alternatively, run the script <code>scripts/conda_update.sh</code>.</p> <p>Then activate</p> <pre><code>conda activate able-workflow-rule-copier\n</code></pre> <p>Configure the <code>able-workflow-copier</code> as the default python environment in the Python Environments VSCode extension.</p> <ol> <li>Install pre-commit into the repo to run checks on every commit</li> </ol> <pre><code>(able-workflow-rule-copier) pre-commit install\n</code></pre>"},{"location":"SUMMARY/","title":"Navigation outline for literate-nav","text":"<ul> <li>ABLE Workflow</li> <li>Project Template</li> <li>Module Template</li> <li>ETL Template</li> <li>Rule Template</li> <li>Quick Reference</li> <li>Contributing</li> </ul>"},{"location":"contributing/","title":"Contributing to ABLE Workflow Rule Copier","text":""},{"location":"contributing/#tests","title":"Tests","text":"<p>The test environments are managed with <code>tox</code>.</p>"},{"location":"contributing/#validating-template-generation","title":"Validating template generation","text":"<p>This template is to be run in a project that was created with <code>able-workflow-copier</code>. To test the rendering of this template, that parent template needs to also be rendered. The version of the parent template that are used for tests is specified in <code>.github/workflows/pr.yml</code> and pulled in <code>scripts/pull_able_workflow_copier.py</code>.</p> <p>Updating <code>able-workflow-copier</code> version</p> <p>Once <code>scripts/sandbox_examples_generate.py</code> or <code>tests/template/conftest.py</code> create the local copy of the <code>able-workflow-copier</code> repo in the <code>sandbox/</code> they do not check to see if it needs updating. To ensure that the local and cloud repos are in sync, regularly run <code>rm -rf sandbox/able-workflow-copier</code></p> <p>Example Copier answers are provided in the <code>answers/</code> directory. The followign command runs the tests for these examples:</p> <pre><code>```bash\ntox run -e py312-template-generate\n```\n</code></pre>"},{"location":"quick-reference/","title":"Quick Reference","text":"<p>Apply this Copier template to an existing <code>able-workflow-copier</code> project (i.e., <code>./</code>) to create a new Snakemake rule with the following commands:</p> <pre><code>copier copy --trust https://github.com/NEU-ABLE-LAB/able-workflow-rule-copier.git ./\n</code></pre> <p>If this template has been updated and you would like to apply those updates to your project, run the following command replacing <code>{{ rule_name }}</code> with the rule you would like to update. You can see all the Copier templates that have been applied to your project in the <code>./copier-answers/</code> directory. (DO NOT EDIT THESE FILES.)</p> <pre><code>copier update --trust --answers-file \".copier-answers/rule-{{ rule_name }}.yml\" ./\n</code></pre>"},{"location":"quick-reference/SUMMARY/","title":"Navigation outline for literate-nav","text":"<ul> <li>Post Copy Checklist</li> </ul>"},{"location":"quick-reference/post-copy/","title":"Post-Copy Checklist","text":"<p>After running <code>copier copy</code>, see <code>.copier-answers/post-copier-todos/rule-{{ rule_name }}.md</code> for next steps on implementing your rule into the project. You can copy-paste the contents of that file into a GitHub issue or a project management tool to track the implementation of the rule.</p>"},{"location":"quick-reference/post-copy/#post-copier-to-dos-for-rule-rule_name","title":"Post Copier To-Do's for Rule {{ rule_name }}","text":"<p>This issue is for tracking the development of a rule that was copied from the <code>able-workflow-rule-copier</code> template.</p>"},{"location":"quick-reference/post-copy/#next-steps","title":"Next steps","text":""},{"location":"quick-reference/post-copy/#required","title":"Required","text":"<ol> <li> <code>workflow/rules/{% if module_type == 'none' %}{{ smk_file_name }}{% endif %}</code></li> <li> Specify <code>input:</code> directives as needed.</li> <li> Specify <code>output:</code> directives as needed.</li> <li> Specify <code>params:</code> directives as needed.</li> <li> Specify <code>wildcards:</code> directives as needed.</li> <li> <code>workflow/scripts/{% if not uses_conda %}rules_global{% else %}rules_conda_{{ conda_env_key }}{% endif %}{{ _copier_conf.sep }}{{ rule_name }}.py</code></li> <li> Assign the desired snakemake directives (e.g., <code>input</code> to variables.</li> <li> Fill in the rule logic within main().</li> <li> Confirm typecheck and lint checks pass with the following commands<ul> <li><code>tox -e py312-typecheck-core</code></li> <li><code>tox -e py312-lint</code></li> </ul> </li> <li> <code>test/workflow/scripts/{% if not uses_conda %}rules_global{% else %}rules_conda_{{ conda_env_key }}{% endif %}{{ _copier_conf.sep }}test_{{ rule_name }}.py.jinja</code></li> <li> Update the <code>Snakemake()</code> parameters of <code>_build_snakemake()</code> with the structure to match the <code>input:</code>, <code>output:</code>, <code>wildcards:</code> and <code>params:</code> directives provided by the rule under test.</li> <li> Provide dummy or tiny subsets of data for tests in the appropriate location under <code>data/tests/</code>.</li> <li> Replace <code>test_main_runs()</code> with the desired test logic for the script under test.</li> <li> Confim tests pass with one of the following commands depending on the conda environment needed to run the test.<ul> <li><code>tox -e py312-workflow-unit-global</code></li> <li><code>tox -e py312-workflow-unit-core</code></li> <li><code>tox -e py312-workflow-unit-extras</code></li> <li><code>tox -e py312-workflow-unit-docs</code></li> </ul> </li> <li> <code>tests/workflow/rules/test_snakemake_{{ rule_name }}.py</code></li> <li> Modify <code>create_dummy_input_file()</code> to create the dummy to subsets of data for tests.</li> <li> Moidfy <code>test_rule_{{ rule_name }}()</code> to check that output data was created.</li> <li> Confirm tests pass with the following command:<ul> <li><code>tox -e py312-workflow-rules</code></li> </ul> </li> <li> Update documentation in <code>docs/docs/contributing/templates/rule-{{ rule_name }}.md</code> on how to use rule or expected output.</li> <li> Run the <code>logs_to_watch</code> rule and update the <code>\"logViewer.watch\"</code> section of <code>.vscode/settings.json</code> with the results found in <code>logs/rules/logs_to_watch.log</code>.</li> </ol>"}]}