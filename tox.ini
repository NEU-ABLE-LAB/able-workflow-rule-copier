# **Why `tox.ini` instead of `pyproject.toml`?**:
# Currently, `tox` only has partial support for `pyproject.toml` and
# cannot programmatically create a matrix of test environments.
# See https://tox.readthedocs.io/en/latest/config.html#pyproject-toml

[tox]
requires =
    tox>=4.25
    tox-gh-actions>=3.3.0
    tox-uv>=1.25.0

envlist = \
    py{311,312}-unit, \
    py{311,312}-template-generate, \
    py{311,312}-template-tox, \
    py312-lint, \
    py312-typecheck
    py312-docs

[gh-actions]
python =
    3.11: py311
    3.12: py312

[testenv:py{311,312}-unit]
description = Run unit tests with pytest
skip_install = false
dependency_groups = test
allowlist_externals=mkdir
setenv =
    COV_CORE_DATAFILE = {toxinidir}/.cover/.coverage.{envname}
    COVERAGE_FILE = {toxinidir}/.cover/.coverage.{envname}
    JUNIT_XML = {toxinidir}/.junit/junit.{envname}.xml
commands_pre =
    # Create .cover/ and .junit/ directories if they don't exist
    mkdir -p {toxinidir}/.cover
    mkdir -p {toxinidir}/.junit
commands =
    # The `-o addopts=''` option overrides the default `pyproject.toml` settings
    {envpython} -m pytest \
        --cov=scripts \
        --cov=extensions \
        --cov=hooks \
        --junitxml={env:JUNIT_XML} \
        --override-ini=junit_family=legacy \
        --ignore={toxinidir}/template \
        --override-ini=addopts='' \
        "tests/scripts" \
        "tests/extensions" \
        "tests/hooks"

[testenv:py{311,312}-template-generate]
description = Run template generation tests with pytest
skip_install = false
dependency_groups = test
commands =
    {envpython} -m pytest \
        "tests/template/rendered"

[testenv:py{311,312}-template-tox]
description = Run tox tests within generated templates
skip_install = false
dependency_groups = test
commands =
    {envpython} -m pytest \
        "tests/template/tox"

[testenv:py{311,312}-lint]
description = Linting for core and each extras
package = skip
dependency_groups = lint
commands =
    {envpython} -m black --check --diff ./
    {envpython} -m ruff check ./
    ansible-lint ./

[testenv:py{311,312}-typecheck]
description = MyPy static type-checks for core and each extras
package = skip
dependency_groups = typecheck
commands = {envpython} -m mypy

[testenv:py{311,312}-docs]
description = Build the docs
dependency_groups = docs, test
commands =
    {envpython} -m pytest \
        "tests/docs"
