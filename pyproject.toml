[build-system]
requires = ["setuptools>=64", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "able_workflow_rule_copier"
dynamic = ["version"]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.11,<3.13"

dependencies = [
  "black>=24.3,<25.0",
  "copier>=9.7.1",
  "loguru>=0.7.2",
  "ruamel.yaml>=0.18.12",
  "ruff>=0.11.8",
  "snakefmt>=0.11.0",
  "typer>=0.16.0",

  # jinja2 extensions
  "cookiecutter>=2.6.0",
  "copier-templates-extensions>=0.3.1",
  "jinja2-jsonschema>=0.3.0",
]

[dependency-groups]

docs = [
  "lxml>=5.4.0",
  "mike>=2.1.3",
  "mkdocs>=1.6.1",
  "mkdocs-include-markdown-plugin>=7.1.6",
  "mkdocs-inline-select-svg-plugin>=0.1.0",
  "mkdocs-jupyter>=0.25.1",
  "mkdocs-gen-files>=0.5.0",
  "mkdocs-git-revision-date-localized-plugin>=1.2.9",
  "mkdocs-literate-nav>=0.6.2",
  "mkdocs-macros-plugin>=1.3.7",
  "mkdocs-material>=9.6.14",
  "mkdocs-mermaid2-plugin>=1.2.1",
  "mkdocs-section-index>=0.3.10",
  "mkdocstrings-python>=1.16.10",
  "notebook>=7.4.2",
  "pymdown-extensions>=10.15",
]

lint = [
  "black>=24.3,<25.0",
  "ruff>=0.11.8",
  "ansible-lint>=25.5.0",
]

test = [
  "pytest>=8.3.5",
  "pytest-copie @ git+https://github.com/thisIsMikeKane/pytest-copie.git",
  "pytest-cov>=6.1.1",
  "pytest-order>=1.3.0",
  "pytest-sugar>=1.0.0",
]

tox = [
  "tox>=4.25.0",
]

# When adding dependencies here, also add them to the mypy hook in `.pre-commit-config.yaml`
typecheck = [
  "mypy>=1.15.0",
  # stubs
  "types-Jinja2>=2.11.9",
  "types-jsonschema>=4.24.0.20250528",
  "loguru>=0.7.2",
  "pydantic>=2.11.4",
]

dev = [
  "pip>=25.1.1",
  "pre-commit>=4.2.0",
  "pyproject2conda>=0.19.1",
  { include-group = "docs" },
  { include-group = "lint" },
  { include-group = "test" },
  { include-group = "tox" },
  { include-group = "typecheck" },
]

[tool.coverage.run]
parallel = true
source = [
  "extensions",
  "hooks",
]
omit   = [
  "tests/*",                       # skip everything in tests/
  "**/conftest.py",                # skip pytest helpers
  "**/__init__.py",                # often trivial
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "if TYPE_CHECKING:",
  "if __name__ == \"__main__\":",
]

[tool.mypy]
python_version = "3.11"
plugins = [
  # https://docs.pydantic.dev/1.10/mypy_plugin/
  "pydantic.mypy",
]
strict = true
exclude = '(^|/)(tests|template)/.*\\.py$'
files = ["hooks", "extensions"]

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "template.*"
ignore_errors = true

[tool.pydantic-mypy]
# With this, the plugin makes the generated `__init__` for Pydantic models
# require exact types (no coercion allowed in type checking). For example, if
# a field is `age: int` and you call `User(age="123")`, Mypy will error
# because `"123"` is a str (even though Pydantic might coerce it at runtime).
# This is useful to enforce correct types at compile time.
warn_untyped_fields = true
# Mypy will error if any Pydantic model field is not annotated with a type.
# This ensures you  don't accidentally leave a field without a type, which
# would be treated as `Any`.
init_typed          = true
# Ensures that if you pass an unexpected field to a model’s constructor,
# Mypy will flag it (even if Pydantic might allow it due to `extra` settings).
# This aligns with using  `extra="forbid"` at runtime.
init_forbid_extra   = true

[tool.pyproject2conda]
channels = [
  "conda-forge",
]
template_python = "environment-py{py}-{env}"

[tool.pyproject2conda.dependencies]
copier-templates-extensions = { pip = true }
jinja2-jsonschema = { pip = true }
mkdocs-inline-select-svg-plugin = { pip = true }
mkdocs-mermaid2-plugin = { pip = true }
mkdocs-section-index = { pip = true }
mkdocs-typer2 = { pip = true }
mkdocstrings = { skip = true, packages = ["mkdocstrings-python>=1.16.10"] }
pytest-copie = { pip = true }
snakefmt = { channel = "bioconda"}

[tool.pyproject2conda.envs."dev"]
style = ["yaml"]
header = true
python = "highest"
extras_or_groups = ["dev"]

[tool.pytest.ini_options]
# These tests should be able to run in the dev environment
testpaths = [
  "tests",
]
# Help with module resolution and avoids some common import errors.
addopts = "--import-mode=importlib"
pythonpath = [
  "."
]

[tool.ruff]
line-length = 79
exclude = [
  "template",
]

[tool.ruff.lint]
extend-select = [
    # "D", # Docstring checks
    "I",  # Import sorting
    "T201",  # Do not allow `print()` statements. Encourage `loguru` instead.
]

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"logging".msg  = "Use Loguru instead."
"warnings".msg = "Use Loguru instead."

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.setuptools]
py-modules = []

[tool.setuptools_scm]
# accept both annotated and lightweight tags that start with “v”
tag_regex = "^v(?P<version>[0-9]+\\.[0-9]+\\.[0-9]+.*)$"
# optional: strip local-version details on dirty builds
local_scheme = "no-local-version"
